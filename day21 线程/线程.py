# 进程：数据隔离，资源分配的最小单位，可以利用多核，由操作系统调度，开启关闭进程切换时间开销大
    # 开启进程：multiprocessing 模块， start  join
    # 进程间可以通信：
        # 文件通信：有数据不安全的问题，要用锁 Lock
        # 队列(Queue,安全)， 管道(Pipe,不安全)
        # 第三方工具
    #进程之间可以通过 multiprocessing.Manager 类实现数据共享
    # 一般情况下我们开启的进程数不会超过 cpu 个数的两倍


# 线程
    # 什么是线程：能被操作系统调度（给cpu执行）的最小单位，开启关闭线程切换时间开销小
    # 一个进程可以有多个线程
    # 同一个进程的多个线程会同时被多核cpu执行
    # 同一个进程的线程是数据共享的
    # 线程也由于可以数据共享，他也存在数据不安全的问题
    # 实际的并发需求主要都是由多线程完成(80%)
    # 线程是不能在外部 terminate 被结束的，你只能等他自己执行完

# 在 CPython 中的多线程 -- 主要用来节省 i/o 时间
    # GC 垃圾回收机制  是一个线程
        # 引用计数 + 分代回收
        # 全局解释器锁(GIL)是为了gc的回收机制，对不同线程的引用计数的变化记录的更加精准
            # 导致了同一个进程中的多个线程只能有一个线程真正被cpu执行
        # 我们需要节省的是 i/o 操作，而不是cpu计算的时间，因为cpu计算的速度非常快 
    
# 在 pypy 解释器中，多线程也不能用多核
# 但是在 jpython 解释器中，多线程可以利用多核
    # 这个要了解一下啊哈哈