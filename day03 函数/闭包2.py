#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2020-04-08 22:00:09
# @Author  : Fallen (xdd043@qq.com)
# @Link    : https://github.com/fallencrasher/python-learning
# @Version : $Id$

#闭包应用
#1.保存返回闭包时的状态
#2.
def func(a,b):
	c = 10

	def inner_func():
		s = a+b+c 
		print("加和为：",s )

	return inner_func

#调用
x1 = func(6,9) #也即，x1=inner_func
x2 = func(2,8)  #同样，x2 = inner_func
#调用返回的内部函数
x1()
x2()
# 从上面可以看到，我们通过传给 a,b 不同的实参，赋予不同的变量x1和x2，
# 得到的连个不同运行结果的函数，这就是闭包的作用，这他妈算什么作用，这个普通
# 函数有啥区别。
# 在python里，函数也是变量的一种，大家都是平等的对象，所以你定义的不同，它功能
# 就不同嘛。。。
# 这个通过闭包定义的新的变量x1,x2,都是函数，不同于普通函数的是，他们是被保留在
# 内存里的函数，在声明之后就跟 a=1 ,b = 'str' 一样，他们就是个普通的变量了，被
# 内存记住了。通过同样方法定义的多个新的变量x3,x4,x5....大家互不影响。
# 其实最主要的区别是，普通调用的函数，在调用后，函数就会被python从内存里拿出去，
# 以免占用过高，所以普通函数在定义时或证明后，代码运行到这个函数这里，就把他暂时
# 保存在内存里，接下来代码运行到调用它那一步，调用完，就要把声明函数那个部分从内存
# 里删除掉。
